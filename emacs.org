#+TITLE: Emacs Configuration
#+AUTHOR: Zachary Massia

* Table of Contents                                                     :TOC_3:
- [[#basic-setup][Basic Setup]]
- [[#ui][UI]]
  - [[#font][Font]]
- [[#misc][Misc]]
  - [[#general-package-configuration][General package configuration]]
  - [[#backup][Backup]]
  - [[#convenience-functions][Convenience functions]]
- [[#programming-packages][Programming Packages]]
    - [[#general-setup][General Setup]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#c][C++]]
    - [[#c-1][C#]]
    - [[#clojure][Clojure]]
    - [[#javascript][Javascript]]
    - [[#rust][Rust]]
    - [[#haskell][Haskell]]

* Basic Setup

  Load the utils file. It contains a collection of elisp functions
  collected from the internet.
  
  #+BEGIN_SRC emacs-lisp
    (use-package zach-utils
      :load-path "lisp/")
  #+END_SRC

  Make sure the theme is available before loading the customize file.
  
  #+BEGIN_SRC emacs-lisp
    (use-package dracula-theme
      :ensure t
      :demand
      :config (load-theme 'dracula t))
  #+END_SRC
    
  Move the customize config to it's own file.
  
  #+BEGIN_SRC emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file)
  #+END_SRC

  Create a group for config settings which can be modifed in customize.

  #+BEGIN_SRC emacs-lisp
    (defgroup my-config nil
      "Configuration settings"
      :group 'local)
  #+END_SRC

  Suppress warnings for functions redefined by ~defadvice~.
  
  #+BEGIN_SRC emacs-lisp
    (setq ad-redefinition-action 'accept)
  #+END_SRC
  
* UI
  
  No need to have the startup message, or tool & scroll bars.
  
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
  #+END_SRC
  

  Only show the menu bar on OSX.

  #+BEGIN_SRC emacs-lisp
    (when (not (eq system-type `darwin))
      (menu-bar-mode -1))
  #+END_SRC


  Set the default window size.

  #+BEGIN_SRC emacs-lisp
    (when window-system
      (set-frame-size (selected-frame) 150 40))
  #+END_SRC


  Show git diffs in the left fringe.

  #+BEGIN_SRC emacs-lisp
    (use-package git-gutter-fringe
      :ensure t
      :defer 5
      :diminish git-gutter-mode
      :config (global-git-gutter-mode))
  #+END_SRC


  Cleanup the modeline. This should be done after the custom-file is loaded or you
  will get the safe theme prompt on each startup.

  #+BEGIN_SRC emacs-lisp
    (use-package smart-mode-line
      :ensure t
      :init (setq sml/theme 'respectful
                  sml/shorten-directory t
                  sml/shorten-modes t)
      :config (sml/setup))
  #+END_SRC


  Make the scrolling smoother by going a line at a time, for both the keyboard
  and mouse

  #+BEGIN_SRC emacs-lisp
    (setq scroll-margin 1
          scroll-step 1
          scroll-conservatively 10000
          scroll-preserve-screen-position 1

          mouse-wheel-follow-mouse 't
          mouse-wheel-scroll-amount '(1 ((shift) .1)))
  #+END_SRC


  Customize the scratch buffer.
  
  #+BEGIN_SRC emacs-lisp
    (setq initial-scratch-message
          ";; scratch buffer -- hack away!")
  #+END_SRC

** Font

   Set the font based on OS.

   #+BEGIN_SRC emacs-lisp
     (pcase system-type
       (`darwin     (set-frame-font "SF Mono-11:weight=light"))
       (`gnu/linux  (set-frame-font "Meslo LG M 10"))
       (`windows-nt (set-frame-font "-outline-Consolas-normal-r-normal-normal-14-97-96-96-c-*-iso8859-1")))

     (setq-default line-spacing 3)
   #+END_SRC


   Use 4 spaces for indentation. 

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4)
   #+END_SRC


   Use font-lock everywhere.

   #+BEGIN_SRC emacs-lisp
     (global-font-lock-mode 1)
   #+END_SRC
   
* Misc

  Some OSX specific settings. 

  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :if (eq system-type 'darwin)
      :init
      (setq exec-path-from-shell-check-startup-files nil
            mac-option-modifier 'super
            mac-command-modifier 'meta) ;; Use cmd as meta.
      :config
      (exec-path-from-shell-initialize)
      ;; Make ansi-term play nice with zsh prompt.
      (defadvice ansi-term (after advise-ansi-term-coding-system)
        (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix)))
  #+END_SRC


  Prevent Magit from showing it's instructions buffer on each startup.

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status)
      :init
      ;; Prevent Magit from showing it's instructions buffer on each startup.
      (setq magit-last-seen-setup-instructions "1.4.0")
      :config
      (use-package magit-popup
        :ensure t))
  #+END_SRC


  Here we define some global key bindings.

  #+BEGIN_SRC emacs-lisp
    (fill-keymap 'global
                 "C-x C-b" 'ibuffer
                 "C-a"     'smart-line-beginning
                 "<f11>"   'toggle-fullscreen
                 "C-c e"   'erc-start-or-switch
                 "C-c t"   'visit-term-buffer
                 "C-j"     'newline-and-indent)
  #+END_SRC   

  Make Emacs aware of Pyenv Python installations.

  #+BEGIN_SRC emacs-lisp
    (use-package pyenv-mode
      :ensure t
      :commands (pyenv-mode pyenv-mode-set))
  #+END_SRC

** General package configuration

   #+BEGIN_SRC emacs-lisp
     (use-package whitespace
       :init (setq whitespace-style '(face empty lines-tail trailing)
                   whitespace-line-column 100))

     (column-number-mode 1)

     (setq-default indent-tabs-mode nil)
   #+END_SRC


   Enable the EditorConfig plugin.

   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :ensure t
       :defer 2
       :config (editorconfig-mode))
   #+END_SRC


   Use paradox as a replacement to the built-in package menu.

   #+BEGIN_SRC emacs-lisp
     (use-package paradox
       :ensure t
       :defer 10)
   #+END_SRC



**** Projectile
     #+BEGIN_SRC emacs-lisp
              (use-package projectile
                :ensure t
                :defer 2
                :config
                (projectile-mode)
                (use-package helm-projectile
                  :ensure t
                  :bind ("C-c p h")
                  :config (helm-projectile-on)))
     #+END_SRC

**** Helm

     #+BEGIN_SRC emacs-lisp
       (use-package helm-company
         :ensure t
         :bind (:map company-mode-map
                     ("C-:" . helm-company)
                     :map company-active-map
                     ("C-:" . helm-company)))

       (use-package helm-flx
         :ensure t)

       (use-package helm-flycheck
         :ensure t
         :bind (:map flycheck-mode-map
                     ("C-c ! h" . helm-flycheck)))

       (use-package helm
         :ensure t
         :defer 1
         :diminish helm-mode
         :bind (("M-x"       . helm-M-x)
                ("M-y"       . helm-show-kill-ring)
                ("C-x C-f"   . helm-find-files)
                ("C-c <SPC>" . helm-all-mark-rings)
                ("C-x r b"   . helm-filtered-bookmarks)
                ("C-h r"     . helm-info-emacs)
                ("C-,"       . helm-calcul-expression)
                ("C-h i"     . helm-info-at-point)
                ("C-x C-d"   . helm-browse-project)
                ("C-h C-f"   . helm-apropos)
                ("C-h a"     . helm-apropos)
                ("C-s"       . helm-occur))
         :init (setq helm-M-x-fuzzy-match t)
         :config
         (require 'helm-config)
         (helm-mode)
         (helm-autoresize-mode)
         (helm-flx-mode))
     #+END_SRC

**** Uniquify
     #+BEGIN_SRC emacs-lisp
       (setq uniquify-buffer-name-style 'post-forward)
     #+END_SRC
     
**** Paren
     #+BEGIN_SRC emacs-lisp
       (show-paren-mode t)
       (setq show-paren-delay 0
             show-paren-style 'parenthesis)
     #+END_SRC

**** Auto Complete
     #+BEGIN_SRC emacs-lisp
       (use-package auto-complete
         :ensure t
         :commands auto-complete-mode
         :init
         (setq ac-auto-start 0
               ac-quick-help-delay 0.5
               ac-fuzzy-enable t
               ac-use-fuzzy t
               ac-auto-show-menu 0.2)
         :config
         (add-to-list 'ac-dictionary-directories (concat user-emacs-directory "ac-dict"))
         (ac-config-default))
     #+END_SRC

         
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :commands company-mode
        :init
        ;; Set company-mode to try and complete instantly
        (setq company-idle-delay 0)
        :config
        (use-package company-irony
          :ensure t
          :init (add-to-list 'company-backends 'company-irony))
        (use-package company-c-headers
          :ensure t
          :init (add-to-list 'company-backends 'company-c-headers)))
    #+END_SRC

**** Org

     Enable spell checking and syntax highlighting in ~org-mode~.
     
     #+BEGIN_SRC emacs-lisp
       (use-package org
         :init (setq org-src-fontify-natively t)
         :config (flyspell-mode))
     #+END_SRC

     Enable ~toc-org~ so this file can have a ToC in Github without any exporting.

     #+BEGIN_SRC emacs-lisp
       (use-package toc-org
         :ensure t
         :commands toc-org-enable
         :init (add-hook 'org-mode-hook 'toc-org-enable))
     #+END_SRC
     
**** Paredit

     #+BEGIN_SRC emacs-lisp
       (use-package paredit
         :ensure t
         :bind (:map paredit-mode-map
                     ("M-s" . paredit-splice-sexp)
                     ("M-S" . paredit-split-sexp)
                     ("M-j" . paredit-join-sexps)

                     ("M-o" . paredit-forward-down)
                     ("M-O" . paredit-forward-up)
                     ("M-u" . paredit-backward-down)
                     ("M-U" . paredit-backward-up)

                     ("M-l" . paredit-forward)
                     ("M-h" . paredit-backward)
                     ("M-k" . paredit-kill)
                     ("M-(" . backward-barf-sexp)
                     ("M-)" . forward-barf-sexp)
                     ("C-(" . backward-slurp-sexp)
                     ("C-)" . forward-slurp-sexp))
         :config
         ;; Some enhanced fns I found somewhere.
         (defun forward-barf-sexp (prefix)
           "Calls `paredit-forward-barf-sexp', unless PREFIX is non nil.
                      With prefix it calls `paredit-barf-all-the-way-forward'"
           (interactive "P")
           (if prefix
               (paredit-barf-all-the-way-forward)
             (paredit-forward-barf-sexp)))

         (defun forward-slurp-sexp (prefix)
           "Calls `paredit-forward-slurp-sexp`, unless PREFIX is non nil.
                      With prefix it calls `paredit-slurp-all-the-way-forward'"
           (interactive "P")
           (if prefix
               (paredit-slurp-all-the-way-forward)
             (paredit-forward-slurp-sexp)))

         (defun backward-barf-sexp (prefix)
           "Calls `paredit-backward-barf-sexp', unless PREFIX is non nil.
                      With prefix it calls `paredit-barf-all-the-way-backward'"
           (interactive "P")
           (if prefix
               (paredit-barf-all-the-way-backward)
             (paredit-backward-barf-sexp)))

         (defun backward-slurp-sexp (prefix)
           "Calls `paredit-backward-slurp-sexp', unless PREFIX is non nil.
                      With prefix it calls `paredit-slurp-all-the-way-backward'"
           (interactive "P")
           (if prefix
               (paredit-slurp-all-the-way-backward)
             (paredit-backward-slurp-sexp)))

         ;; Enable Paredit in the minibuffer.
         (defvar paredit-minibuffer-commands '(eval-expression
                                               pp-eval-expression
                                               eval-expression-with-eldoc
                                               ibuffer-do-eval
                                               ibuffer-do-view-and-eval)
           "Interactive commands for which paredit should be enabled in the minibuffer.")

         (add-hook 'minibuffer-setup-hook
                   (lambda ()
                     (if (memq this-command paredit-minibuffer-commands)
                         (enable-paredit-mode)))))
     #+END_SRC

**** IBuffer

     Use Purcell's ibuffer-vc for grouping.

     #+BEGIN_SRC emacs-lisp
       (use-package ibuffer-vc
         :ensure t
         :defer 5
         :init
         ;; Include version control status info in the ibuffer list.
         (setq ibuffer-formats
               '((mark modified read-only vc-status-mini " "
                       (name 18 18 :left :elide)
                       " "
                       (size 9 -1 :right)
                       " "
                       (mode 16 16 :left :elide)
                       " "
                       (vc-status 16 16 :left)
                       " "
                       filename-and-process)))
         :config (add-hook 'ibuffer-hook (lambda()
                                           (ibuffer-vc-set-filter-groups-by-vc-root)
                                           (unless (eq ibuffer-sorting-mode 'alphabetic)
                                             (ibuffer-do-sort-by-alphabetic)))))
     #+END_SRC

**** Markdown
     
     Install `markdown-mode`

     #+BEGIN_SRC emacs-lisp
       (use-package markdown-mode
         :ensure t
         :commands (markdown-mode gfm-mode)
         :mode (("README\\.md\\'" . gfm-mode)
                ("\\.md\\'" . markdown-mode)
                ("\\.markdown\\'" . markdown-mode)))
     #+END_SRC

**** NeoTree

     #+BEGIN_SRC emacs-lisp
       (defun neotree-project-dir ()
         "Open NeoTree using the git root."
         (interactive)
         (let ((project-dir (projectile-project-root))
               (file-name   (buffer-file-name)))
           (neotree-toggle)
           (if project-dir
               (if (neo-global--window-exists-p)
                   (progn
                     (neotree-dir project-dir)
                     (neotree-find file-name)))
             (message "Could not find git project root."))))

       (use-package neotree
         :ensure t
         :commands neotree-toggle
         :bind ("M-\\" . neotree-project-dir)
         :config
         (use-package all-the-icons
           :ensure t)
         (setq neo-theme (if (display-graphic-p)
                             'icons
                           'arrow)))
     #+END_SRC

**** Ledger

     #+BEGIN_SRC emacs-lisp
       (use-package ledger-mode
         :ensure t
         :commands ledger-mode)
     #+END_SRC
     

** Backup  
   
   Some backup settings. These should be cleaned up in the future.

   #+BEGIN_SRC emacs-lisp
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t))
           backup-directory-alist '((".*" . "~/.emacs.d/backups/")))

     (make-directory (concat user-emacs-directory "autosaves/") t)

     (setq vc-make-backup-files t
           backup-by-copying t
           delete-old-versions t
           kept-new-versions 6
           kept-old-versions 2
           version-control t)
   #+END_SRC

** Convenience functions

   Split the current buffer with a terminal.

   #+BEGIN_SRC emacs-lisp
     (defun visit-term-buffer ()
       "Create or visit a terminal buffer."
       (interactive)
       (if (not (get-buffer "*ansi-term*"))
           (progn
             (split-window-sensibly (selected-window))
             (other-window 1)
             (ansi-term (getenv "SHELL")))
         (switch-to-buffer-other-window "*ansi-term*")))
   #+END_SRC
   
* Programming Packages

*** General Setup

    Set some keywords to be highlighted.

    #+BEGIN_SRC emacs-lisp
      (use-package fic-mode
        :ensure t
        :commands (fic-mode)
        :init (setq fic-highlighted-words '("FIXME" "FIXME:" "TODO" "TODO:"
                                            "HACK" "HACK:" "NOTE" "NOTE:"
                                            "BUG" "BUG:" "REFACTOR" "REFACTOR:")))
    #+END_SRC


    Enable some basic packages for every programming language.

    #+BEGIN_SRC emacs-lisp
      (defcustom programming-language-major-modes
        '(prog-mode     ; This is the mode perl, makefile, lisp-mode, scheme-mode,
                        ; emacs-lisp-mode, sh-mode, java-mode, c-mode, c++-mode,
                        ; python-mode inherits from.
          lua-mode
          cmake-mode
          tex-mode                            ; LaTeX inherits
          sgml-mode                           ; HTML inherits
          css-mode
          nxml-mode
          diff-mode
          haskell-mode
          rst-mode
          arduino-mode)
        "What to consider as programming languages."
        :group 'my-config)

      (use-package rainbow-delimiters
        :ensure t
        :commands (rainbow-delimiters-mode))

      (use-package smartparens
        :ensure t
        :commands (smartparens-mode smartparens-strict-mode)
        :config (require 'smartparens-config))

      (dolist (mode programming-language-major-modes)
        (add-hook
         (intern (concat (symbol-name mode) "-hook"))
         (lambda ()
           (fic-mode)
           (rainbow-delimiters-mode)
           (whitespace-mode)
           (smartparens-mode))))
    #+END_SRC


    Don't ask to save before compilation.

    #+BEGIN_SRC emacs-lisp
      (setq compilation-ask-about-save nil
            compilation-window-height 30)
    #+END_SRC


    Setup flycheck. 

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :defer 5
        :commands (global-flycheck-mode flycheck-add-mode)

        :init
        (global-flycheck-mode)
        (setq flycheck-completion-system 'ido
              flycheck-disabled-checkers '(emacs-lisp-checkdoc))

        ;; Remove newline checks, since they would trigger an immediate check
        ;; when we want the idle-change-delay to be in effect while editing.
        (setq flycheck-check-syntax-automatically '(save
                                                    idle-change
                                                    mode-enabled))


        :config
        (defun magnars/adjust-flycheck-automatic-syntax-eagerness ()
          "Adjust how often we check for errors based on if there are any.

      This lets us fix any errors as quickly as possible, but in a clean buffer we're an order
      of magnitude laxer about checking."
          (setq flycheck-idle-change-delay
                (if flycheck-current-errors 0.5 5.0)))

        (add-hook 'flycheck-after-syntax-check-hook
                  'magnars/adjust-flycheck-automatic-syntax-eagerness)

        ;; Each buffer gets its own idle-change-delay because of the
        ;; buffer-sensitive adjustment above.
        (make-variable-buffer-local 'flycheck-idle-change-delay)

        (defun flycheck-handle-idle-change ()
          "Handle an expired idle time since the last change.

      This is an overwritten version of the original flycheck-handle-idle-change, which removes
      the forced deferred. Timers should only trigger inbetween commands in a single threaded
      system and the forced deferred makes errors never show up before you execute another command."
          (flycheck-clear-idle-change-timer)
          (flycheck-buffer-automatically 'idle-change))

        (use-package flycheck-package
          :ensure t
          :config (flycheck-package-setup)))
    #+END_SRC


    Setup the indentation style for C-based languages (C, C++, Java, etc).

    #+BEGIN_SRC emacs-lisp
      (setq c-default-style "stroustrup")
    #+END_SRC

    Support for `*.toml` files.

    #+BEGIN_SRC emacs-lisp
      (use-package toml-mode
        :ensure t
        :defer 10
        :commands toml-mode)
    #+END_SRC

*** Emacs Lisp

    Enable a few packages for elisp-related modes.

    #+BEGIN_SRC emacs-lisp
      (defcustom elisp-programming-major-modes
        '(emacs-lisp-mode
          lisp-interaction-mode
          ielm-mode)
        "Modes that are used to do Elisp programming.")

      (use-package pretty-lambdada
        :ensure t
        :commands (pretty-lambda-mode))

      (defun my-elisp-setup ()
        "Enable some packages for any elisp related buffer."
        (eldoc-mode)
        (paredit-mode)
        (rainbow-delimiters-mode)
        (pretty-lambda-mode)
        (smartparens-mode -1)
        (auto-complete-mode -1)
        (company-mode))

      (dolist (mode elisp-programming-major-modes)
        (add-hook (intern (concat (symbol-name mode) "-hook"))
                  'my-elisp-setup))
    #+END_SRC

*** C++

    Add irony-mode and platformio-mode to c/c++ mode.
    
    #+BEGIN_SRC emacs-lisp
      (use-package irony
        :ensure t
        :commands (irony-mode))

      (use-package irony-eldoc
        :ensure t
        :commands (irony-eldoc))

      (use-package platformio-mode
        :ensure t
        :commands (platformio-conditionally-enable)
        :config
        (pyenv-mode)
        (pyenv-mode-set "platformio-python"))

      (defun irony-and-platformio-hook ()
        (irony-mode)
        (irony-eldoc)
        (auto-complete-mode -1)
        (company-mode)
        (platformio-conditionally-enable))

      (add-hook 'c-mode-hook 'irony-and-platformio-hook)
      (add-hook 'c++-mode-hook 'irony-and-platformio-hook)
    #+END_SRC

    
    Replace the ~completion-at-point~ and ~complete-symbol~ bindings in 
    irony-mode's buffers by the async functions.
    
    #+BEGIN_SRC emacs-lisp
      (defun irony-use-async-ac ()
        (define-key irony-mode-map [remap completion-at-point]
          'irony-completion-at-point-async)

        (define-key irony-mode-map [remap completion-symbol]
          'irony-completion-at-point-async)
        (irony-cdb-autosetup-compile-options))

      (add-hook 'irony-mode-hook 'irony-use-async-ac)
    #+END_SRC
    
    
    Use Flycheck with Irony.

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-irony
        :ensure t
        :defer 2
        :init (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
    #+END_SRC

*** C#
    
    #+BEGIN_SRC emacs-lisp
      (use-package csharp-mode
        :ensure t
        :defer t
        :config
        (use-package omnisharp
          :ensure t
          :init (add-hook 'csharp-mode-hook 'omnisharp-mode)))
    #+END_SRC

*** Clojure
    
    #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode
        :ensure t
        :commands (clojure-mode clojurescript-mode)
        :config
        ;; On OSX, each Java process started by Cider or Leiningen will show up on
        ;; the dock. The following option prevents that.
        (setenv "LEIN_JVM_OPTS" "-Dapple.awt.UIElement=true")


        (add-hook 'clojure-mode-hook
                  (lambda ()
                    ;; Disable smartparens in favor of paredit
                    (smartparens-mode -1)
                    (paredit-mode)

                    ;; Make sure Eldoc and Company are running
                    (auto-complete-mode -1)
                    (company-mode)
                    (eldoc-mode)))

        ;; Set up some custom identation rules
        (define-clojure-indent
          (defroutes 'defun)
          (GET 2)
          (POST 2)
          (PUT 2)
          (DELETE 2)
          (HEAD 2)
          (ANY 2)
          (context 2))

        ;; Use symbols for 'fn', function literals, and sets.
        (font-lock-add-keywords
         'clojure-mode `(("(\\(fn\\)[\[[:space:]]"
                          (0 (progn (compose-region (match-beginning 1)
                                                    (match-end 1) "λ")
                                    nil)))))
        (font-lock-add-keywords
         'clojure-mode `(("\\(#\\)("
                          (0 (progn (compose-region (match-beginning 1)
                                                    (match-end 1) "ƒ")
                                    nil)))))
        (font-lock-add-keywords
         'clojure-mode `(("\\(#\\){"
                          (0 (progn (compose-region (match-beginning 1)
                                                    (match-end 1) "∈")
                                    nil))))))

      (use-package cider
          :ensure t
          :commands (cider-mode cider-repl-mode)
          :init
          (setq nrepl-hide-special-buffers t
                cider-auto-select-error-buffer nil
                cider-repl-result-prefix ";; => "
                cider-repl-use-pretty-printing t
                cider-repl-use-clojure-font-lock t)
          (add-hook 'cider-mode-hook (lambda ()
                                       (eldoc-mode)
                                       (company-mode)))
          (add-hook 'cider-repl-mode-hook (lambda ()
                                            (eldoc-mode)
                                            (company-mode)
                                            (paredit-mode)))
          :config

          ;; Save buffer before testing or loading.
          (defadvice clojure-test-run-tests (before save-first activate)
            (save-buffer))
          (defadvice cider-load-current-buffer (before save-first activate)
            (save-buffer)))

      (use-package cljsbuild-mode
        :ensure t
        :commands (cljsbuild-start)
        :init
        ;; Use "lein trampoline" when building Clojurescript, and hide the buffer when the
        ;; build was successful.
        (setq cljsbuild-hide-buffer-on-success t
              cljsbuild-compile-command "lein trampoline cljsbuild auto"))
    #+END_SRC

*** Javascript

    Use web-mode and js2-mode.
    
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :ensure t
        :mode "\\.jsx$"
        :commands web-mode
        :init
        (flycheck-add-mode 'javascript-eslint 'web-mode)
        (setq web-mode-markup-indent-offset 2
              web-mode-css-indent-offset 2
              web-mode-code-indent-offset 2
              web-mode-indent-style 2)
        :config
        (defadvice web-mode-highlight-part (around tweak-jsx-activate)
          (if (equal web-mode-content-type "jsx")
              (let ((web-mode-enable-part-face nil))
                ad-do-it)
            ad-do-it)))

      (use-package js2-mode
        :ensure t
        :commands js2-mode
        :mode (("\\.js$" . js2-mode)
               ("\\.es6$" . js2-mode)
               ("\\.ejs$" . js2-mode))
        :interpreter "node"
        :init
        (setq js-indent-level 2))
    #+END_SRC

    Disable jshint in favor of eslint.

    #+BEGIN_SRC emacs-lisp
      (setq-default flycheck-disabled-checkers
                    (append flycheck-disabled-checkers
                            '(javascript-jshint)))
    #+END_SRC

    
    Enable NVM support.
    
    #+BEGIN_SRC emacs-lisp
      (when (file-exists-p "~/.nvm")
        (use-package nvm
          :ensure t
          :defer 5
          :config
          (nvm-use (caar (last (nvm--installed-versions))))))
    #+END_SRC

    
    Check for a local eslint after switching Projectile projects.
    
    #+BEGIN_SRC emacs-lisp
      (defun setup-local-eslint ()
        "If ESLint found in node_modules directory, use that for flycheck."
        (interactive)
        (let ((local-eslint (expand-file-name "./node_modules/.bin/eslint")))
          (setq flycheck-javascript-eslint-executable
                (and (file-exists-p local-eslint) local-eslint))))

      (add-hook 'projectile-after-switch-project-hook 'setup-local-eslint)
    #+END_SRC
*** Rust

    #+BEGIN_SRC emacs-lisp
      (use-package rust-mode
        :ensure t
        :commands rust-mode
        :mode "\\.rs\\'"
        :config (setq rust-format-on-save t))

      (use-package racer
        :ensure t
        :commands racer-mode
        :init
        (add-hook 'rust-mode-hook (lambda ()
                                    (racer-mode)
                                    (eldoc-mode)
                                    (auto-complete-mode -1)
                                    (company-mode))))

      (use-package flycheck-rust
        :ensure t
        :init (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

      (use-package cargo
        :ensure t
        :commands cargo-minor-mode
        :init
        (add-hook 'rust-mode-hook 'cargo-minor-mode)
        (setq compilation-scroll-output t))
    #+END_SRC

*** Haskell

    #+BEGIN_SRC emacs-lisp
      (use-package intero
        :ensure t
        :commands intero-mode
        :init
        (add-hook 'haskell-mode-hook 'intero-mode)
        :config
        (auto-complete-mode -1)
        (company-mode))
    #+END_SRC    
