    
*** Clojure
    Use inf-clojure and figwheel to run a Clojurescript REPL.

    #+BEGIN_SRC emacs-lisp
      (defun figwheel-repl ()
        (interactive)
        (run-clojure "lein figwheel"))

      (add-hook 'clojure-mode-hook #'inf-clojure-minor-mode)
    #+END_SRC

**** Hooks

     #+BEGIN_SRC emacs-lisp
       (add-hook 'cider-mode-hook
                 (lambda ()
                   (eldoc-mode)))

       (add-hook 'cider-repl-mode-hook
                 (lambda ()
                   (setq show-trailing-whitespace nil)
                   (eldoc-mode)
                   (paredit-mode 1)
                   (hl-line-mode -1)))

       (add-hook 'clojure-mode-hook
                 (lambda ()
                   (clj-refactor-mode 1)
                   (cider-mode 1)
                   (fill-keymap cider-mode-map
                                "C-c c-e" 'cider-eval-defun-at-point
                                "C-c C-h" 'clojure-cheatsheet
                                "C-c C-m" nil
                                "C-x C-i" 'align-cljlet
                                ;; Next two give error for some reason
                                               ;"C-c c"   'count-last-sexp
                                               ;"C-c n"   'nth-from-last-sexp
                                )
                   (cljr-add-keybindings-with-prefix "C-c C-m")
                   (clojure-test-mode 1)
                   (autopair-mode 1)
                   (paredit-mode 1)
                   (local-set-key (kbd "RET") 'newline-and-indent)))
     #+END_SRC

**** Kibit

     Emacs integration for Kibit, a static code analyzer.
     
     Teach compile the syntax of the Kibit output.

     #+BEGIN_SRC emacs-lisp
       (require 'compile)
       (add-to-list 'compilation-error-regexp-alist-alist
                    '(kibit "At \\([^:]+\\):\\([[:digit:]]+\\):" 1 2 nil 0))
       (add-to-list 'compilation-error-regexp-alist 'kibit)
     #+END_SRC


     Some functions for running Kibit on a buffer and a project.

     #+BEGIN_SRC emacs-lisp
       (defun kibit ()
         "Run kibit on the current project.
       Display the results in a hyperlinked *compilation* buffer."
         (interactive)
         (compile "lein kibit"))

       (defun kibit-current-file ()
         "Run kibit on the current file.
       Display the results in a hyperlinked *compilation* buffer."
         (interactive)
         (compile (concat "lein kibit " buffer-file-name)))
     #+END_SRC

**** 4clojure

     Some 4clojure helper fn's.

     #+BEGIN_SRC emacs-lisp
       (defun 4clojure-check-and-proceed ()
         "Check the answer and show the next question if it worked"
         (interactive)
         (unless
             (save-excursion
               ;; Find last sexp (the answer.)
               (goto-char (point-max))
               (forward-sexp -1)
               ;; Check the answer.
               (cl-letf ((answer
                          (buffer-substring (point) (point-max)))
                         ;; Preserve buffer contents, in case you failed.
                         ((buffer-string)))
                 (goto-char (point-min))
                 (while (search-forward "__" nil t)
                   (replace-match answer))
                 (string-match "failed." (4clojure-check-answers))))
           (4clojure-next-question)))

       (defadvice 4clojure/start-new-problem
           (after 4clojure/start-new-problem-advice () activate)
         ;; Prettify the 4clojure buffer.
         (goto-char (point-min))
         (forward-line 2)
         (forward-char 3)
         (fill-paragraph)
         ;; Position point for the answer
         (goto-char (point-max))
         (insert "\n\n\n")
         (forward-char -1)
         ;; Define our key.
         (local-set-key (kbd "M-j") #'4clojure-check-and-proceed))

       (defadvice 4clojure-open-question
           (around 4clojure-open-question-around)
         "Start a cider/nREPL connection if one hasn't already been started when
       opening 4clojure questions"
         ad-do-it
         (unless cider-current-clojure-buffer
           (cider-jack-in)))
     #+END_SRC

**** Misc Functions

     #+BEGIN_SRC emacs-lisp
       (defun count-last-sexp ()
         (interactive)
         (cider-interactive-eval
          (format "(count %s)"
                  (cider-last-sexp))))

       (defun nth-from-last-sexp (n)
         (interactive "p")
         (cider-interactive-eval
          (format "(nth %s %s)"
                  (cider-last-sexp) n)))


       (defun cider-namespace-refresh ()
         (interactive)
         (cider-eval-sync
          "(require '[clojure.tools.namespace.repl :refer [refresh]])
           (refresh)"
          (cider-current-ns)))


       (require 'projectile)
       (defun lein-server ()
         "Run 'lein server' in the project root."
         (interactive)
         (projectile-with-default-dir (projectile-project-root)
           (start-process "lein-server" "*lein-server*" "lein" "trampoline" "server")))

     #+END_SRC

*** F#
    
    #+BEGIN_SRC emacs-lisp
      (require 'fsharp-mode)
      (setq inferior-fsharp-program "/usr/local/bin/fsharpi --readline-"
            fsharp-compiler "/usr/local/bin/fsharpc")

      (add-hook 'fsharp-mode-hook
                (lambda ()
                  (auto-complete-mode t)
                  (autopair-mode t)))
    #+END_SRC

*** Haskell

    #+BEGIN_SRC emacs-lisp
      (require 'haskell-mode)

      (add-hook 'haskell-mode-hook
                (lambda ()
                  (turn-on-haskell-indentation)
                  (auto-complete-mode)
                  (autopair-mode)
                  (eldoc-mode)))

      (eval-after-load "haskell-mode"
        '(fill-keymap haskell-mode-map
                      "C-x C-d" nil
                      "C-c C-z" 'haskell-interactive-switch
                      "C-c C-l" 'haskell-process-load-file
                      "C-c C-b" 'haskell-interactive-switch
                      "C-c C-t" 'haskell-process-do-type
                      "C-c C-i" 'haskell-process-do-info
                      "C-c M-." nil
                      "C-c C-d" nil))
    #+END_SRC

*** Javascript

    Use js2-mode.

    #+BEGIN_SRC emacs-lisp
      (require 'js2-mode)

      ;; Use js2-mode for Javascript
      (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

      (add-hook 'js2-mode-hook
                (lambda ()
                  (autopair-on)))
    #+END_SRC


    Use 2 space indentation

    #+BEGIN_SRC emacs-lisp
      (setq js2-basic-offset 2)
      (setq js-indent-level 2)
    #+END_SRC

*** Lua

    #+BEGIN_SRC emacs-lisp
      (require 'lua-mode)

      (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
      (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
      (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

      (setq lua-indent-level 2)

      (add-hook 'lua-mode-hook 'autopair-mode)
    #+END_SRC
    
*** Python

    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode-hook
                (lambda ()
                  (jedi:setup)
                  (setq tab-width 4)))
      (setq jedi:complete-on-dot t)
    #+END_SRC


    Support for virtualenv within Emacs.

    #+BEGIN_SRC emacs-lisp
      (setq venv-location
            (if (eq system-type 'darwin)
                (exec-path-from-shell-getenv "WORKON_HOME")
              (getenv "WORKON_HOME")))

      (venv-initialize-eshell)
    #+END_SRC


    Install some commonly used packages after creating a new virtualenv.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'venv-postmkvirtualenv-hook
                (lambda ()
                  (shell-command "pip install jedi")))
    #+END_SRC


    Attempt to automatically switch to a project's virtualenv.
    
    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode-hook
                (lambda ()
                  (hack-local-variables)
                  (when (boundp 'project-venv-name)
                    (venv-workon project-venv-name))))
    #+END_SRC

    Simply add the following to ~.dir-locals~ in your project root.
    ~((python-mode . ((project-venv-name . "myproject-env"))))~
    
*** Racket

    #+BEGIN_SRC emacs-lisp
      (require 'racket-mode)

      (add-hook 'racket-mode-hook
                (lambda ()
                  (autopair-mode 1)
                  (paredit-mode 1)
                  (local-set-key (kbd "RET") 'newline-and-indent)))
    #+END_SRC

*** Typescript

    #+BEGIN_SRC emacs-lisp
      (require 'typescript)
      (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))

      (require 'tss)
      (setq tss-popup-help-key "C-:"
            tss-jump-to-definition-key "C->")

      (tss-config-default)
    #+END_SRC

*** Rust

    Grab the necessary environment variables for Racer.

    #+BEGIN_SRC emacs-lisp
      (when (eq (window-system) 'ns)
        (exec-path-from-shell-copy-envs '("RUST_SRC_PATH" "RACER_CMD" "RACER_DIR")))

      (setq racer-rust-src-path (getenv "RUST_SRC_PATH")
            racer-cmd           (getenv "RACER_CMD"))

    #+END_SRC


    Setup Racer to provide auto completion using company.

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path (expand-file-name "editors/emacs" (getenv "RACER_DIR")))
      (eval-after-load "rust-mode" '(require 'racer))
    #+END_SRC
